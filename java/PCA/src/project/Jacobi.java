package project;

import java.io.FileNotFoundException;

/**
 * Created by IntelliJ IDEA.
 * User: plamen
 * Date: 25-Jun-2009
 * Time: 18:33:47
 * To change this template use File | Settings | File Templates.
 */
public class Jacobi {


    public static void main(String[] args) {

        String fileStr = "E:\\temp\\pca6A.csv";

        double[][] A = new double[0][];
        try {
            A = DataFile.getMatrix(fileStr);
        } catch (FileNotFoundException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        /**
        double[][] A = new double[][]{{1, 2, 3, 4},
                                      {5, 6, 7, 8},
                                      {9, 10, 11, 12},
                                      {13, 14, 15, 16}
                                     };
     **/
    /**
        double[][] A = new double[][]{{6.44,6.71,6.65,6.50,6.33,6.15,5.99,5.84,5.71,5.57,5.44,5.30,5.16,5.01,4.86,4.71,4.55,4.39,4.24,4.09,3.94,3.81,3.68,3.57,3.46,3.37,3.29,3.23,3.18,3.15,3.13,3.12,3.12,3.13,3.16,3.19,3.22,3.27,3.31,3.36,3.42,3.48,3.54,3.60,3.66,3.73,3.79,3.86,3.92,3.99},
                                    {6.45,6.75,6.68,6.54,6.39,6.23,6.08,5.95,5.82,5.69,5.56,5.43,5.28,5.13,4.97,4.80,4.63,4.46,4.29,4.13,3.97,3.82,3.68,3.55,3.44,3.33,3.25,3.18,3.12,3.08,3.06,3.05,3.05,3.06,3.09,3.12,3.16,3.21,3.26,3.32,3.38,3.44,3.51,3.58,3.65,3.72,3.80,3.87,3.95,4.02},
                                    {6.44,6.74,6.68,6.56,6.41,6.26,6.12,5.98,5.84,5.71,5.57,5.43,5.28,5.12,4.96,4.79,4.62,4.45,4.28,4.11,3.95,3.80,3.66,3.53,3.41,3.31,3.22,3.14,3.08,3.04,3.01,2.99,2.99,3.00,3.02,3.04,3.08,3.12,3.16,3.22,3.27,3.33,3.39,3.45,3.52,3.59,3.65,3.72,3.79,3.86},
                                    {6.41,6.69,6.62,6.49,6.35,6.20,6.06,5.93,5.79,5.66,5.52,5.38,5.23,5.07,4.91,4.74,4.57,4.40,4.23,4.06,3.91,3.75,3.61,3.48,3.36,3.25,3.15,3.07,3.01,2.96,2.92,2.90,2.89,2.89,2.90,2.92,2.95,2.99,3.03,3.08,3.13,3.19,3.25,3.31,3.37,3.44,3.51,3.58,3.65,3.72},
                                    {6.40,6.64,6.55,6.42,6.27,6.13,5.98,5.85,5.72,5.58,5.44,5.30,5.15,5.00,4.83,4.67,4.50,4.33,4.17,4.00,3.85,3.70,3.56,3.42,3.30,3.19,3.09,3.01,2.94,2.89,2.85,2.82,2.80,2.80,2.80,2.82,2.84,2.88,2.92,2.96,3.01,3.07,3.12,3.19,3.25,3.32,3.38,3.45,3.53,3.60},
                                    {6.45,6.70,6.62,6.50,6.36,6.22,6.08,5.95,5.82,5.69,5.55,5.40,5.25,5.09,4.92,4.74,4.56,4.39,4.21,4.03,3.87,3.70,3.55,3.41,3.27,3.15,3.05,2.96,2.88,2.82,2.78,2.74,2.73,2.72,2.73,2.75,2.78,2.81,2.85,2.90,2.96,3.02,3.08,3.15,3.22,3.29,3.36,3.44,3.52,3.60},
                                    {6.47,6.70,6.64,6.52,6.40,6.26,6.13,6.00,5.88,5.75,5.61,5.47,5.31,5.16,4.99,4.82,4.65,4.48,4.32,4.16,4.00,3.86,3.72,3.59,3.47,3.36,3.26,3.18,3.11,3.05,3.01,2.98,2.96,2.96,2.96,2.98,3.00,3.03,3.07,3.11,3.16,3.21,3.27,3.32,3.39,3.45,3.52,3.58,3.65,3.73},
                                    {6.45,6.66,6.59,6.47,6.33,6.19,6.05,5.91,5.77,5.63,5.49,5.35,5.19,5.04,4.88,4.72,4.55,4.39,4.24,4.09,3.95,3.81,3.68,3.56,3.45,3.35,3.26,3.18,3.11,3.06,3.02,2.99,2.97,2.96,2.97,2.98,2.99,3.02,3.05,3.09,3.13,3.18,3.22,3.28,3.33,3.39,3.45,3.51,3.57,3.63},
                                    {6.44,6.67,6.61,6.49,6.36,6.22,6.09,5.96,5.83,5.69,5.56,5.42,5.26,5.11,4.95,4.78,4.62,4.45,4.29,4.14,3.99,3.84,3.71,3.58,3.46,3.36,3.26,3.18,3.11,3.05,3.01,2.97,2.95,2.95,2.95,2.96,2.98,3.00,3.03,3.07,3.12,3.16,3.22,3.27,3.33,3.39,3.45,3.51,3.58,3.64},
                                    {6.47,6.73,6.67,6.55,6.42,6.28,6.14,6.01,5.88,5.75,5.61,5.47,5.32,5.16,5.00,4.83,4.67,4.50,4.34,4.18,4.03,3.88,3.74,3.61,3.49,3.38,3.29,3.20,3.13,3.07,3.03,2.99,2.97,2.97,2.97,2.98,3.00,3.02,3.06,3.10,3.14,3.19,3.25,3.30,3.36,3.42,3.49,3.55,3.62,3.69},
                                    {6.49,6.78,6.75,6.65,6.53,6.40,6.27,6.14,6.01,5.87,5.73,5.58,5.43,5.26,5.09,4.92,4.75,4.57,4.40,4.24,4.08,3.93,3.79,3.65,3.53,3.42,3.32,3.23,3.16,3.10,3.06,3.03,3.01,3.00,3.01,3.02,3.04,3.07,3.11,3.15,3.20,3.26,3.31,3.37,3.44,3.50,3.57,3.64,3.71,3.78},
                                    {6.43,6.72,6.70,6.61,6.48,6.34,6.20,6.07,5.93,5.79,5.65,5.50,5.35,5.19,5.02,4.86,4.69,4.53,4.37,4.22,4.07,3.94,3.81,3.68,3.57,3.47,3.38,3.30,3.23,3.18,3.14,3.11,3.09,3.08,3.09,3.10,3.12,3.14,3.18,3.22,3.26,3.31,3.37,3.42,3.48,3.54,3.60,3.67,3.73,3.80},
                                    {6.44,6.74,6.73,6.65,6.53,6.40,6.27,6.13,6.00,5.86,5.71,5.56,5.40,5.23,5.06,4.89,4.73,4.56,4.40,4.25,4.10,3.96,3.83,3.71,3.60,3.50,3.41,3.33,3.27,3.22,3.18,3.16,3.15,3.14,3.15,3.17,3.20,3.23,3.27,3.32,3.37,3.43,3.49,3.55,3.61,3.68,3.75,3.82,3.90,3.97},
                                    {6.42,6.72,6.71,6.62,6.50,6.36,6.23,6.09,5.95,5.81,5.67,5.52,5.36,5.20,5.04,4.88,4.72,4.56,4.41,4.26,4.12,3.99,3.87,3.75,3.65,3.55,3.47,3.39,3.33,3.28,3.25,3.22,3.21,3.20,3.21,3.23,3.25,3.28,3.31,3.36,3.40,3.45,3.51,3.56,3.62,3.69,3.75,3.81,3.88,3.95},
                                    {6.41,6.71,6.70,6.61,6.49,6.36,6.22,6.08,5.94,5.80,5.65,5.50,5.34,5.18,5.01,4.85,4.69,4.53,4.38,4.23,4.09,3.96,3.84,3.73,3.62,3.53,3.44,3.37,3.31,3.26,3.23,3.20,3.19,3.19,3.20,3.21,3.24,3.27,3.30,3.35,3.39,3.44,3.50,3.55,3.61,3.68,3.74,3.80,3.87,3.94},
                                    {6.39,6.67,6.65,6.56,6.43,6.29,6.14,6.00,5.86,5.71,5.56,5.40,5.25,5.08,4.92,4.76,4.59,4.44,4.28,4.14,4.00,3.87,3.74,3.62,3.52,3.42,3.33,3.26,3.20,3.15,3.11,3.08,3.07,3.07,3.08,3.09,3.12,3.15,3.18,3.23,3.28,3.33,3.38,3.44,3.50,3.56,3.63,3.70,3.76,3.83},
                                    {6.34,6.61,6.60,6.52,6.40,6.27,6.14,6.00,5.86,5.72,5.58,5.43,5.27,5.11,4.95,4.79,4.63,4.47,4.32,4.18,4.04,3.91,3.79,3.68,3.57,3.48,3.39,3.32,3.26,3.21,3.17,3.15,3.13,3.13,3.13,3.15,3.17,3.19,3.23,3.27,3.31,3.36,3.41,3.46,3.52,3.58,3.64,3.70,3.76,3.83},
                                    {6.41,6.70,6.69,6.61,6.49,6.37,6.24,6.11,5.98,5.84,5.70,5.54,5.39,5.22,5.05,4.89,4.72,4.56,4.40,4.25,4.11,3.98,3.85,3.74,3.63,3.54,3.46,3.39,3.33,3.28,3.25,3.23,3.21,3.21,3.22,3.24,3.26,3.29,3.33,3.37,3.42,3.47,3.52,3.58,3.63,3.70,3.76,3.82,3.89,3.96},
                                    {6.43,6.72,6.72,6.64,6.53,6.40,6.27,6.14,6.01,5.87,5.72,5.57,5.41,5.24,5.07,4.90,4.74,4.57,4.41,4.26,4.12,3.98,3.86,3.74,3.63,3.54,3.45,3.38,3.32,3.27,3.24,3.21,3.20,3.20,3.21,3.23,3.25,3.28,3.32,3.37,3.41,3.47,3.52,3.58,3.64,3.71,3.77,3.84,3.91,3.98},
                                    {6.39,6.66,6.64,6.55,6.43,6.30,6.16,6.03,5.89,5.74,5.59,5.44,5.28,5.11,4.94,4.77,4.61,4.44,4.29,4.14,3.99,3.86,3.74,3.62,3.51,3.42,3.34,3.26,3.20,3.16,3.12,3.10,3.09,3.09,3.09,3.11,3.13,3.17,3.20,3.25,3.30,3.35,3.40,3.46,3.52,3.59,3.65,3.72,3.79,3.86},
                                    {6.34,6.58,6.56,6.45,6.32,6.17,6.02,5.87,5.72,5.57,5.41,5.25,5.09,4.93,4.77,4.61,4.45,4.30,4.16,4.02,3.90,3.78,3.67,3.57,3.47,3.39,3.31,3.25,3.19,3.14,3.11,3.08,3.07,3.06,3.06,3.07,3.09,3.11,3.14,3.18,3.22,3.26,3.31,3.36,3.41,3.47,3.52,3.58,3.64,3.71},
                                    {6.29,6.55,6.55,6.46,6.34,6.20,6.05,5.90,5.75,5.60,5.44,5.28,5.12,4.95,4.79,4.63,4.48,4.33,4.19,4.05,3.93,3.82,3.71,3.61,3.52,3.44,3.36,3.30,3.24,3.20,3.16,3.13,3.12,3.11,3.11,3.11,3.13,3.15,3.17,3.21,3.24,3.28,3.33,3.37,3.42,3.47,3.53,3.58,3.64,3.70},
                                    {6.28,6.53,6.54,6.45,6.31,6.16,6.01,5.85,5.69,5.53,5.37,5.20,5.03,4.86,4.70,4.53,4.37,4.22,4.08,3.94,3.81,3.69,3.59,3.48,3.39,3.31,3.23,3.17,3.11,3.07,3.03,3.00,2.99,2.98,2.98,2.99,3.00,3.02,3.05,3.08,3.12,3.16,3.21,3.26,3.31,3.36,3.42,3.47,3.53,3.59},
                                    {6.33,6.59,6.59,6.50,6.38,6.24,6.10,5.95,5.80,5.64,5.48,5.32,5.15,4.97,4.80,4.63,4.46,4.30,4.15,4.00,3.86,3.74,3.62,3.51,3.41,3.33,3.25,3.18,3.12,3.08,3.04,3.01,3.00,2.99,3.00,3.01,3.03,3.06,3.09,3.13,3.17,3.22,3.27,3.32,3.38,3.44,3.50,3.56,3.62,3.69},
                                    {6.36,6.61,6.61,6.52,6.41,6.27,6.13,5.98,5.83,5.67,5.50,5.33,5.16,4.98,4.80,4.62,4.44,4.28,4.12,3.97,3.83,3.70,3.58,3.47,3.38,3.29,3.21,3.14,3.09,3.04,3.01,2.99,2.98,2.97,2.98,2.99,3.02,3.05,3.08,3.12,3.17,3.21,3.27,3.32,3.38,3.44,3.50,3.57,3.63,3.70},
                                    {6.32,6.56,6.57,6.49,6.37,6.24,6.09,5.94,5.79,5.63,5.46,5.29,5.11,4.93,4.75,4.58,4.40,4.24,4.08,3.94,3.80,3.68,3.56,3.46,3.37,3.28,3.21,3.14,3.09,3.04,3.01,2.99,2.97,2.97,2.97,2.98,3.00,3.02,3.05,3.09,3.13,3.17,3.22,3.27,3.32,3.37,3.43,3.49,3.55,3.61},
                                    {6.33,6.57,6.58,6.51,6.40,6.27,6.13,5.98,5.83,5.67,5.51,5.33,5.16,4.97,4.79,4.61,4.44,4.27,4.12,3.97,3.84,3.72,3.61,3.51,3.42,3.35,3.28,3.23,3.19,3.15,3.13,3.12,3.12,3.12,3.14,3.16,3.18,3.21,3.25,3.28,3.33,3.37,3.42,3.47,3.52,3.57,3.62,3.68,3.73,3.79},
                                    {6.33,6.56,6.57,6.50,6.40,6.29,6.16,6.02,5.88,5.72,5.56,5.40,5.22,5.04,4.86,4.69,4.51,4.35,4.20,4.05,3.92,3.80,3.69,3.59,3.50,3.43,3.36,3.31,3.26,3.23,3.21,3.19,3.19,3.19,3.20,3.21,3.23,3.26,3.29,3.32,3.36,3.40,3.44,3.48,3.53,3.57,3.62,3.67,3.72,3.77},
                                    {6.27,6.49,6.49,6.42,6.32,6.21,6.08,5.96,5.82,5.68,5.53,5.37,5.21,5.04,4.87,4.70,4.54,4.39,4.25,4.11,3.99,3.88,3.78,3.69,3.61,3.54,3.48,3.43,3.39,3.36,3.33,3.32,3.32,3.32,3.33,3.34,3.36,3.38,3.41,3.44,3.47,3.50,3.54,3.58,3.61,3.65,3.69,3.74,3.78,3.82},
                                    {6.23,6.39,6.38,6.32,6.23,6.12,6.00,5.88,5.75,5.61,5.47,5.32,5.16,5.00,4.83,4.67,4.52,4.37,4.23,4.10,3.99,3.88,3.78,3.70,3.62,3.55,3.50,3.45,3.41,3.38,3.36,3.34,3.34,3.34,3.34,3.36,3.37,3.39,3.41,3.44,3.47,3.50,3.53,3.56,3.60,3.63,3.67,3.71,3.74,3.78},
                                    {6.28,6.43,6.42,6.35,6.25,6.13,6.01,5.88,5.75,5.61,5.47,5.32,5.16,4.99,4.83,4.67,4.51,4.36,4.22,4.08,3.96,3.85,3.75,3.66,3.58,3.50,3.44,3.39,3.35,3.31,3.29,3.27,3.26,3.26,3.27,3.28,3.29,3.31,3.34,3.37,3.40,3.43,3.46,3.50,3.54,3.57,3.61,3.65,3.70,3.74},
                                    {6.42,6.58,6.55,6.47,6.37,6.24,6.12,5.98,5.85,5.71,5.56,5.40,5.24,5.07,4.90,4.74,4.57,4.41,4.26,4.12,3.99,3.86,3.75,3.65,3.56,3.48,3.41,3.35,3.31,3.27,3.25,3.24,3.24,3.24,3.26,3.28,3.31,3.34,3.38,3.42,3.46,3.51,3.56,3.61,3.66,3.71,3.76,3.82,3.87,3.93},
                                    {6.37,6.49,6.48,6.41,6.32,6.21,6.08,5.96,5.82,5.68,5.53,5.38,5.22,5.05,4.88,4.71,4.55,4.39,4.24,4.09,3.96,3.83,3.72,3.61,3.52,3.43,3.36,3.30,3.25,3.22,3.19,3.18,3.17,3.18,3.19,3.22,3.24,3.28,3.31,3.36,3.40,3.45,3.50,3.55,3.60,3.66,3.71,3.77,3.83,3.88},
                                    {6.36,6.48,6.46,6.39,6.29,6.17,6.04,5.90,5.76,5.62,5.47,5.31,5.14,4.97,4.80,4.63,4.47,4.31,4.15,4.01,3.87,3.74,3.63,3.52,3.42,3.34,3.26,3.20,3.15,3.12,3.09,3.08,3.07,3.08,3.09,3.12,3.14,3.18,3.22,3.26,3.31,3.36,3.41,3.46,3.52,3.57,3.63,3.69,3.75,3.81},
                                    {6.32,6.41,6.39,6.31,6.21,6.08,5.95,5.81,5.67,5.53,5.37,5.21,5.05,4.88,4.71,4.54,4.38,4.22,4.07,3.93,3.80,3.67,3.56,3.46,3.36,3.28,3.21,3.15,3.10,3.06,3.04,3.03,3.02,3.03,3.05,3.07,3.10,3.13,3.17,3.21,3.26,3.31,3.36,3.41,3.46,3.52,3.58,3.63,3.69,3.75},
                                    {6.28,6.37,6.33,6.23,6.10,5.97,5.82,5.68,5.54,5.39,5.24,5.09,4.93,4.78,4.62,4.46,4.31,4.17,4.03,3.90,3.78,3.67,3.57,3.47,3.38,3.31,3.24,3.18,3.13,3.10,3.07,3.05,3.05,3.05,3.06,3.07,3.09,3.12,3.15,3.19,3.22,3.27,3.31,3.35,3.40,3.44,3.49,3.54,3.59,3.64},
                                    {6.32,6.40,6.35,6.25,6.12,5.98,5.83,5.69,5.55,5.41,5.26,5.11,4.96,4.80,4.65,4.50,4.35,4.21,4.07,3.95,3.83,3.72,3.61,3.52,3.43,3.35,3.29,3.23,3.18,3.14,3.11,3.09,3.08,3.08,3.09,3.10,3.12,3.15,3.18,3.21,3.25,3.29,3.33,3.37,3.41,3.46,3.51,3.55,3.60,3.65},
                                    {6.29,6.36,6.30,6.17,6.02,5.87,5.71,5.56,5.41,5.27,5.12,4.97,4.83,4.68,4.53,4.39,4.25,4.12,4.00,3.88,3.77,3.67,3.57,3.49,3.41,3.34,3.27,3.22,3.17,3.13,3.11,3.09,3.08,3.07,3.08,3.09,3.10,3.12,3.15,3.18,3.21,3.24,3.28,3.32,3.35,3.39,3.43,3.48,3.52,3.56},
                                    {6.31,6.38,6.30,6.17,6.02,5.86,5.70,5.55,5.40,5.25,5.10,4.95,4.81,4.66,4.51,4.37,4.23,4.10,3.98,3.86,3.75,3.65,3.56,3.47,3.39,3.32,3.26,3.21,3.16,3.13,3.10,3.08,3.07,3.07,3.07,3.08,3.10,3.12,3.14,3.17,3.20,3.24,3.27,3.31,3.35,3.39,3.43,3.47,3.51,3.56},
                                    {6.32,6.40,6.33,6.20,6.05,5.89,5.73,5.57,5.42,5.27,5.12,4.97,4.82,4.67,4.52,4.37,4.23,4.10,3.97,3.86,3.75,3.64,3.55,3.46,3.39,3.31,3.25,3.20,3.16,3.12,3.09,3.08,3.07,3.07,3.07,3.09,3.10,3.13,3.15,3.18,3.22,3.25,3.29,3.33,3.37,3.41,3.45,3.49,3.54,3.58},
                                    {6.33,6.43,6.37,6.25,6.11,5.96,5.81,5.67,5.52,5.38,5.24,5.09,4.95,4.80,4.65,4.50,4.36,4.23,4.10,3.98,3.87,3.77,3.68,3.59,3.51,3.44,3.38,3.33,3.29,3.25,3.23,3.21,3.20,3.20,3.21,3.22,3.24,3.26,3.28,3.31,3.35,3.38,3.41,3.45,3.49,3.53,3.57,3.61,3.65,3.69},
                                    {6.28,6.37,6.32,6.21,6.07,5.93,5.78,5.64,5.50,5.36,5.22,5.07,4.93,4.78,4.63,4.48,4.34,4.20,4.08,3.96,3.84,3.74,3.64,3.56,3.48,3.40,3.34,3.29,3.24,3.21,3.18,3.16,3.15,3.15,3.16,3.17,3.18,3.21,3.23,3.26,3.29,3.33,3.36,3.40,3.44,3.48,3.52,3.56,3.61,3.65},
                                    {6.28,6.38,6.33,6.24,6.11,5.97,5.83,5.69,5.55,5.41,5.26,5.11,4.96,4.81,4.65,4.50,4.35,4.21,4.07,3.94,3.82,3.71,3.60,3.51,3.42,3.34,3.27,3.21,3.16,3.12,3.09,3.07,3.06,3.05,3.06,3.07,3.09,3.11,3.14,3.17,3.21,3.24,3.29,3.33,3.37,3.42,3.46,3.51,3.56,3.61},
                                    {6.27,6.34,6.30,6.19,6.06,5.91,5.75,5.60,5.45,5.30,5.15,5.00,4.85,4.70,4.54,4.40,4.25,4.12,3.99,3.86,3.75,3.65,3.55,3.46,3.37,3.30,3.23,3.17,3.13,3.09,3.06,3.04,3.02,3.02,3.02,3.03,3.05,3.06,3.09,3.12,3.15,3.18,3.22,3.25,3.29,3.33,3.37,3.41,3.46,3.50},
                                    {6.23,6.31,6.26,6.15,6.00,5.85,5.69,5.54,5.39,5.24,5.09,4.93,4.78,4.63,4.48,4.34,4.20,4.06,3.94,3.82,3.71,3.60,3.50,3.42,3.33,3.26,3.19,3.13,3.08,3.04,3.01,2.99,2.98,2.97,2.97,2.98,3.00,3.01,3.04,3.06,3.10,3.13,3.16,3.20,3.24,3.28,3.32,3.36,3.40,3.45},
                                    {6.24,6.30,6.24,6.13,5.99,5.83,5.67,5.51,5.36,5.20,5.05,4.89,4.74,4.59,4.43,4.29,4.15,4.01,3.89,3.77,3.67,3.57,3.47,3.39,3.31,3.23,3.17,3.12,3.07,3.03,3.00,2.98,2.97,2.96,2.97,2.97,2.99,3.01,3.03,3.06,3.09,3.12,3.15,3.19,3.23,3.26,3.30,3.35,3.39,3.43},
                                    {6.24,6.31,6.26,6.15,6.01,5.85,5.69,5.53,5.38,5.22,5.07,4.91,4.76,4.60,4.45,4.31,4.17,4.04,3.92,3.81,3.71,3.61,3.52,3.44,3.36,3.29,3.23,3.18,3.13,3.10,3.07,3.05,3.04,3.03,3.03,3.04,3.05,3.07,3.09,3.11,3.14,3.17,3.20,3.23,3.27,3.30,3.34,3.38,3.42,3.46},
                                    {6.25,6.29,6.23,6.12,5.97,5.81,5.64,5.48,5.32,5.16,5.01,4.86,4.71,4.56,4.42,4.28,4.15,4.04,3.93,3.82,3.73,3.65,3.57,3.49,3.43,3.36,3.31,3.26,3.22,3.18,3.16,3.14,3.12,3.11,3.11,3.12,3.13,3.14,3.15,3.17,3.19,3.22,3.24,3.27,3.30,3.33,3.36,3.39,3.42,3.45},
                                    {6.27,6.32,6.26,6.14,6.00,5.84,5.68,5.52,5.37,5.22,5.07,4.92,4.77,4.63,4.48,4.35,4.22,4.11,4.00,3.90,3.81,3.72,3.65,3.58,3.51,3.46,3.40,3.36,3.32,3.29,3.26,3.24,3.23,3.22,3.22,3.22,3.23,3.24,3.25,3.27,3.29,3.31,3.33,3.36,3.38,3.41,3.43,3.46,3.49,3.52},
                                    {6.26,6.30,6.24,6.13,5.99,5.83,5.67,5.52,5.36,5.21,5.06,4.91,4.76,4.62,4.47,4.34,4.21,4.09,3.98,3.89,3.80,3.71,3.64,3.57,3.51,3.45,3.40,3.35,3.31,3.28,3.25,3.23,3.22,3.21,3.21,3.21,3.21,3.22,3.23,3.25,3.26,3.28,3.30,3.33,3.35,3.37,3.40,3.42,3.45,3.48}
                                   };
        **/
        double t, c, s;
        int p, q, icount, state; 
        int size = A.length;
        double tol = 1.e-5; // the tolerance level of convergence
        int icmax = 100; // the maximum iterations number
        int[] colRowOfElMax = new int[size], rowOfElMax = new int[1];
        double[][] temp = new double[size][size], D = new double[size][size];
        double[][] V, diagD;
        double[] maxElColRow = new double[size], maxElRow = new double[1];
        double[][] dMinusDiagD = new double[size][size], absDminusDiagD = new double[size][size];
        double[][] rot = new double[2][2], rotT = new double[2][2];

        // makes V into a unit matrix
        V = new double[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                V[i][j] = 0;
            }
            V[i][i] = 1.0;
        }
        D = A; // copies A to D
        diagD = diag(D, size);// outputs DiagD=diagonal of D
        dMinusDiagD = minus(D, diagD, size); // does D-DiagD
        abs(dMinusDiagD, absDminusDiagD, size);// does abs(D-DiagD)
        maxMatrix(absDminusDiagD, size, colRowOfElMax, maxElColRow);
        maxVector(maxElColRow, size, rowOfElMax, maxElRow);
        q = rowOfElMax[0];
        p = colRowOfElMax[q];
        icount = 0;
        state = 1;

        // Iterations
        while (state == 1 && icount < icmax) {
            icount = icount + 1;
            if (D[q][q] == D[p][p]) { // check to prevent t from diverging
                D[q][q] = D[p][p] + 1.e-10;
            }
            t = D[p][q] / (D[q][q] - D[p][p]);
            c = 1 / Math.sqrt(t * t + 1);
            s = c * t;
            rot[0][0] = c;
            rot[0][1] = s;
            rot[1][0] = -s;
            rot[1][1] = c;
            transpose(rot, rotT, 2);// rotT=transpose(Rot)
            for (int i = 0; i < size; i++) {
                temp[p][i] = rotT[0][0] * D[p][i] + rotT[0][1] * D[q][i];
                temp[q][i] = rotT[1][0] * D[p][i] + rotT[1][1] * D[q][i];
                D[p][i] = temp[p][i];
                D[q][i] = temp[q][i];
            }
            for (int i = 0; i < size; i++) {
                temp[i][p] = D[i][p] * rot[0][0] + D[i][q] * rot[1][0];
                temp[i][q] = D[i][p] * rot[0][1] + D[i][q] * rot[1][1];
                D[i][p] = temp[i][p];
                D[i][q] = temp[i][q];
            }
            for (int i = 0; i < size; i++) {
                temp[i][p] = V[i][p] * rot[0][0] + V[i][q] * rot[1][0];
                temp[i][q] = V[i][p] * rot[0][1] + V[i][q] * rot[1][1];
                V[i][p] = temp[i][p];
                V[i][q] = temp[i][q];
            }

            // find the new q, p element array values that need to be changed
            diagD = diag(D, size); // outputs diagD=diagonal of D
            dMinusDiagD = minus(D, diagD, size); // does D-DiagD
            abs(dMinusDiagD, absDminusDiagD, size); // does abs(D-DiagD)
            maxMatrix(absDminusDiagD, size, colRowOfElMax, maxElColRow);
            maxVector(maxElColRow, size, rowOfElMax, maxElRow);
            q = rowOfElMax[0];
            p = colRowOfElMax[q];
            if (Math.abs(D[p][q]) < tol * Math.sqrt(sumDiagElSq(diagD, size)) / size) {
                state = 0;
            }
        }

        // V is the eigen vectors
        System.out.println("Jacobi Eigenvalues");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(diagD[i][j] + "\t");
            }
            System.out.println(" ");
        }
    }

    /**
     * finds the diagonal elements of A and puts them into B   *
     * * @param A
     * * @param n
     * * @return
     */
    public static double[][] diag(double A[][], int n) {
        double[][] B = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                B[i][j] = 0;
            }
            B[i][i] = A[i][i];
        }
        return B;
    }

    /**
     * C = A - B   *
     * * @param A
     * * @param B
     * * @param n
     * * @return C
     */
    public static double[][] minus(double A[][], double B[][], int n) {
        double[][] C = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] - B[i][j];
            }
        }
        return C;
    }

    /**
     * Finds the absolute value of a matrix   *
     * * @param A
     * * @param B
     * * @param n
     */

    public static void abs(double A[][], double B[][], int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                B[i][j] = Math.abs(A[i][j]);
            }
        }
    }

    /**
     * finds the maximum elements of each column; returns the maximums in Max and
     * * their array positions in Row
     * * @param A
     * * @param n
     * * @param Row
     * * @param Max
     */
    public static void maxMatrix(double A[][], int n, int Row[], double Max[]) {
        for (int i = 0; i < n; i++) {
            int k = 0;
            Max[i] = A[k][i];
            Row[i] = k;
            for (int j = 0; j < n; j++) {
                if (A[j][i] > Max[i]) {
                    Max[i] = A[j][i];
                    Row[i] = j;
                }
            }
            k = k + 1;
        }
    }

    /**
     * finds the maximum elements of a column of A; returns the maximum of a
     * * column as Max and its array position as Row   *
     * * @param A
     * * @param n
     * * @param Row
     * * @param Max
     */
    public static void maxVector(double A[], int n, int Row[], double Max[]) {
        Max[0] = A[0];
        Row[0] = 0;
        for (int i = 0; i < n; i++) {
            if (A[i] > Max[0]) {
                Max[0] = A[i];
                Row[0] = i;
            }
        }
    }

    /**
     * finds the transpose of A and puts it into B   *
     * * @param A
     * * @param B
     * * @param n
     */
    public static void transpose(double A[][], double B[][], int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                B[i][j] = A[j][i];
            }
        }
    }

    /**
     * finds the sums of the squared of the diagonal elements of A   *
     * * @param A
     * * @param n
     * * @return
     */
    public static double sumDiagElSq(double A[][], int n) {
        double sum = 0;
        for (int i = 0; i < n; i++) {
            sum = A[i][i] * A[i][i] + sum;
        }
        return sum;
    }
}